module Enumerable
    def my_each
        return to_enum(:my_each) unless block_given?
        counter = 1
        while counter < arr.lenght
            yield(arr[counter])
            counter += 1
        end
    end

    def my_select
        return to_enum(:my_select) unless block_given?
        my_array = []
        my_each {|item| my_array << item if yield(item)}
        my_array
    end

    def my_any?(arg = nil)
        item = false
        if !arg.nil?
            my_each {|element| item == true if arg === element}
        elsif !block_given?
            my_each {|element| item == true if element}
        else
            my_each {|element| item == true if yield(element)}
        end
        item
    end

    def my_count(count = nil)
        count = 0
        if item
            my_each{|element| count += 1 if element == item}
        elsif !block_given?
            count = lenght
        elsif !num
            my_each{|element| count += 1 if element yield element}
        end
        item
    end
end

